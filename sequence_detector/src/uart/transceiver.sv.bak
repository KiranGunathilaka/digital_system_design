module uart_seq_transceiver #(
  parameter CLOCKS_PER_PULSE = 5208,
            BITS_PER_WORD    = 8
)(
  input  logic clk,
  input  logic rstn,

  // UART interface
  input  logic rx,
  output logic tx,

  // Output for visual feedback
  output logic led_detected
);

  // UART RX signals
  logic m_valid;
  logic [7:0] m_data;

  // UART TX signals
  logic s_valid, s_ready;
  logic [7:0] s_data;

  // Sequence detector
  logic seq_detected;

  // ============================
  // UART Instance
  // ============================
  uart #(
    .CLOCKS_PER_PULSE(CLOCKS_PER_PULSE),
    .BITS_PER_WORD(BITS_PER_WORD)
  ) uart_inst (
    .clk(clk),
    .rstn(rstn),
    .s_valid(s_valid),
    .s_data(s_data),
    .s_ready(s_ready),
    .tx(tx),
    .rx(rx),
    .m_valid(m_valid),
    .m_data(m_data)
  );

  // ============================
  // Sequence Detector
  // Feed one bit per received byte (e.g. LSB)
  // ============================
  sequence_detector_0110 seq_det (
    .clk(clk),
    .reset(!rstn),
    .data_in(m_data[0]),   // use LSB of received byte
    .detected(seq_detected)
  );

  assign led_detected = seq_detected;

  // ============================
  // TX feedback when detected
  // ============================
  always_ff @(posedge clk or negedge rstn) begin
    if (!rstn) begin
      s_valid <= 0;
      s_data  <= 0;
    end else begin
      if (seq_detected && s_ready) begin
        s_data  <= 8'h44;   // ASCII 'D' for "Detected"
        s_valid <= 1;
      end else begin
        s_valid <= 0;
      end
    end
  end

endmodule
